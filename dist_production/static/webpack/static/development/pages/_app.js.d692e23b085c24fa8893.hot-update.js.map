{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.d692e23b085c24fa8893.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react'\r\nimport { Provider, inject, observer } from 'mobx-react'\r\nimport App, { Container } from 'next/app'\r\nimport { BaseLayout, SecondLayout } from 'WIDGETS/layout'\r\nimport { withRouter } from 'next/router'\r\nimport I18N from 'I18N'\r\nimport { initRootStore } from 'STORE/RootStore'\r\nimport Head from 'next/head'\r\n@inject('rootStore')\r\n@observer\r\nclass PropComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() {\r\n        console.log(SecondLayout)\r\n        const { Component, pageProps, router } = this.props\r\n        /**\r\n         * for different route, you can use different layout for different page\r\n         */\r\n        return (\r\n            <Container>\r\n                <Head>\r\n                    <title>My Next.js Application</title>\r\n                </Head>\r\n                <BaseLayout language={this.props.language} rootStore={this.props.rootStore} router={this.props.router}>\r\n                    <Component {...pageProps} language={this.props.language} rootStore={this.props.rootStore} router={this.props.router} />\r\n                </BaseLayout>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass MyApp extends App {\r\n    static async getInitialProps({ Component, router, ctx }) {\r\n        let pageProps = {}\r\n\r\n        if (Component.getInitialProps) {\r\n            // getInitialProps钩子，\r\n            pageProps = await Component.getInitialProps(ctx)\r\n        }\r\n        const isServer = !!ctx.req\r\n        return { pageProps, isServer }\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n        const { rootStore } = this.props\r\n        this.rootStore = initRootStore(props.isServer)\r\n    }\r\n    render() {\r\n        const { Component, pageProps, router } = this.props\r\n        let lang = I18N.isSupported(router.asPath.replace(router.pathname, '').replace('/', ''))\r\n\r\n        return (<Provider>\r\n            <PropComponent pageProps={pageProps} Component={Component} rootStore={this.rootStore} language={lang} router={router} />\r\n        </Provider>)\r\n    }\r\n}\r\n\r\nexport default withRouter(MyApp)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AApBA;AACA;AAuBA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;;;;;;AAEA;AACA;;AADA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAGA;AAHA;AAIA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AAvBA;AACA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}